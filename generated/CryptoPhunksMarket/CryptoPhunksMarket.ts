// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PhunkBidEntered extends ethereum.Event {
  get params(): PhunkBidEntered__Params {
    return new PhunkBidEntered__Params(this);
  }
}

export class PhunkBidEntered__Params {
  _event: PhunkBidEntered;

  constructor(event: PhunkBidEntered) {
    this._event = event;
  }

  get phunkIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PhunkBidWithdrawn extends ethereum.Event {
  get params(): PhunkBidWithdrawn__Params {
    return new PhunkBidWithdrawn__Params(this);
  }
}

export class PhunkBidWithdrawn__Params {
  _event: PhunkBidWithdrawn;

  constructor(event: PhunkBidWithdrawn) {
    this._event = event;
  }

  get phunkIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PhunkBought extends ethereum.Event {
  get params(): PhunkBought__Params {
    return new PhunkBought__Params(this);
  }
}

export class PhunkBought__Params {
  _event: PhunkBought;

  constructor(event: PhunkBought) {
    this._event = event;
  }

  get phunkIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get toAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class PhunkNoLongerForSale extends ethereum.Event {
  get params(): PhunkNoLongerForSale__Params {
    return new PhunkNoLongerForSale__Params(this);
  }
}

export class PhunkNoLongerForSale__Params {
  _event: PhunkNoLongerForSale;

  constructor(event: PhunkNoLongerForSale) {
    this._event = event;
  }

  get phunkIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PhunkOffered extends ethereum.Event {
  get params(): PhunkOffered__Params {
    return new PhunkOffered__Params(this);
  }
}

export class PhunkOffered__Params {
  _event: PhunkOffered;

  constructor(event: PhunkOffered) {
    this._event = event;
  }

  get phunkIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CryptoPhunksMarket__phunkBidsResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class CryptoPhunksMarket__phunksOfferedForSaleResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: Address;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class CryptoPhunksMarket extends ethereum.SmartContract {
  static bind(address: Address): CryptoPhunksMarket {
    return new CryptoPhunksMarket("CryptoPhunksMarket", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingWithdrawals(param0: Address): BigInt {
    let result = super.call(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingWithdrawals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingWithdrawals",
      "pendingWithdrawals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  phunkBids(param0: BigInt): CryptoPhunksMarket__phunkBidsResult {
    let result = super.call(
      "phunkBids",
      "phunkBids(uint256):(bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CryptoPhunksMarket__phunkBidsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_phunkBids(
    param0: BigInt
  ): ethereum.CallResult<CryptoPhunksMarket__phunkBidsResult> {
    let result = super.tryCall(
      "phunkBids",
      "phunkBids(uint256):(bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CryptoPhunksMarket__phunkBidsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  phunksAddress(): Address {
    let result = super.call("phunksAddress", "phunksAddress():(address)", []);

    return result[0].toAddress();
  }

  try_phunksAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "phunksAddress",
      "phunksAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  phunksOfferedForSale(
    param0: BigInt
  ): CryptoPhunksMarket__phunksOfferedForSaleResult {
    let result = super.call(
      "phunksOfferedForSale",
      "phunksOfferedForSale(uint256):(bool,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CryptoPhunksMarket__phunksOfferedForSaleResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress()
    );
  }

  try_phunksOfferedForSale(
    param0: BigInt
  ): ethereum.CallResult<CryptoPhunksMarket__phunksOfferedForSaleResult> {
    let result = super.tryCall(
      "phunksOfferedForSale",
      "phunksOfferedForSale(uint256):(bool,uint256,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CryptoPhunksMarket__phunksOfferedForSaleResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialPhunksAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptBidForPhunkCall extends ethereum.Call {
  get inputs(): AcceptBidForPhunkCall__Inputs {
    return new AcceptBidForPhunkCall__Inputs(this);
  }

  get outputs(): AcceptBidForPhunkCall__Outputs {
    return new AcceptBidForPhunkCall__Outputs(this);
  }
}

export class AcceptBidForPhunkCall__Inputs {
  _call: AcceptBidForPhunkCall;

  constructor(call: AcceptBidForPhunkCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptBidForPhunkCall__Outputs {
  _call: AcceptBidForPhunkCall;

  constructor(call: AcceptBidForPhunkCall) {
    this._call = call;
  }
}

export class BuyPhunkCall extends ethereum.Call {
  get inputs(): BuyPhunkCall__Inputs {
    return new BuyPhunkCall__Inputs(this);
  }

  get outputs(): BuyPhunkCall__Outputs {
    return new BuyPhunkCall__Outputs(this);
  }
}

export class BuyPhunkCall__Inputs {
  _call: BuyPhunkCall;

  constructor(call: BuyPhunkCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyPhunkCall__Outputs {
  _call: BuyPhunkCall;

  constructor(call: BuyPhunkCall) {
    this._call = call;
  }
}

export class EnterBidForPhunkCall extends ethereum.Call {
  get inputs(): EnterBidForPhunkCall__Inputs {
    return new EnterBidForPhunkCall__Inputs(this);
  }

  get outputs(): EnterBidForPhunkCall__Outputs {
    return new EnterBidForPhunkCall__Outputs(this);
  }
}

export class EnterBidForPhunkCall__Inputs {
  _call: EnterBidForPhunkCall;

  constructor(call: EnterBidForPhunkCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnterBidForPhunkCall__Outputs {
  _call: EnterBidForPhunkCall;

  constructor(call: EnterBidForPhunkCall) {
    this._call = call;
  }
}

export class OfferPhunkForSaleCall extends ethereum.Call {
  get inputs(): OfferPhunkForSaleCall__Inputs {
    return new OfferPhunkForSaleCall__Inputs(this);
  }

  get outputs(): OfferPhunkForSaleCall__Outputs {
    return new OfferPhunkForSaleCall__Outputs(this);
  }
}

export class OfferPhunkForSaleCall__Inputs {
  _call: OfferPhunkForSaleCall;

  constructor(call: OfferPhunkForSaleCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OfferPhunkForSaleCall__Outputs {
  _call: OfferPhunkForSaleCall;

  constructor(call: OfferPhunkForSaleCall) {
    this._call = call;
  }
}

export class OfferPhunkForSaleToAddressCall extends ethereum.Call {
  get inputs(): OfferPhunkForSaleToAddressCall__Inputs {
    return new OfferPhunkForSaleToAddressCall__Inputs(this);
  }

  get outputs(): OfferPhunkForSaleToAddressCall__Outputs {
    return new OfferPhunkForSaleToAddressCall__Outputs(this);
  }
}

export class OfferPhunkForSaleToAddressCall__Inputs {
  _call: OfferPhunkForSaleToAddressCall;

  constructor(call: OfferPhunkForSaleToAddressCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minSalePriceInWei(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get toAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OfferPhunkForSaleToAddressCall__Outputs {
  _call: OfferPhunkForSaleToAddressCall;

  constructor(call: OfferPhunkForSaleToAddressCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PhunkNoLongerForSaleCall extends ethereum.Call {
  get inputs(): PhunkNoLongerForSaleCall__Inputs {
    return new PhunkNoLongerForSaleCall__Inputs(this);
  }

  get outputs(): PhunkNoLongerForSaleCall__Outputs {
    return new PhunkNoLongerForSaleCall__Outputs(this);
  }
}

export class PhunkNoLongerForSaleCall__Inputs {
  _call: PhunkNoLongerForSaleCall;

  constructor(call: PhunkNoLongerForSaleCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PhunkNoLongerForSaleCall__Outputs {
  _call: PhunkNoLongerForSaleCall;

  constructor(call: PhunkNoLongerForSaleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPhunksContractCall extends ethereum.Call {
  get inputs(): SetPhunksContractCall__Inputs {
    return new SetPhunksContractCall__Inputs(this);
  }

  get outputs(): SetPhunksContractCall__Outputs {
    return new SetPhunksContractCall__Outputs(this);
  }
}

export class SetPhunksContractCall__Inputs {
  _call: SetPhunksContractCall;

  constructor(call: SetPhunksContractCall) {
    this._call = call;
  }

  get newPhunksAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPhunksContractCall__Outputs {
  _call: SetPhunksContractCall;

  constructor(call: SetPhunksContractCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawBidForPhunkCall extends ethereum.Call {
  get inputs(): WithdrawBidForPhunkCall__Inputs {
    return new WithdrawBidForPhunkCall__Inputs(this);
  }

  get outputs(): WithdrawBidForPhunkCall__Outputs {
    return new WithdrawBidForPhunkCall__Outputs(this);
  }
}

export class WithdrawBidForPhunkCall__Inputs {
  _call: WithdrawBidForPhunkCall;

  constructor(call: WithdrawBidForPhunkCall) {
    this._call = call;
  }

  get phunkIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawBidForPhunkCall__Outputs {
  _call: WithdrawBidForPhunkCall;

  constructor(call: WithdrawBidForPhunkCall) {
    this._call = call;
  }
}
